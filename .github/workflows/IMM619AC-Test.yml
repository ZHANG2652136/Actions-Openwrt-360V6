#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name:  IMM619AC Test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede     #编译固件源码链接（请勿修改）
  REPO_BRANCH: master                                #源码链接的分支（请勿修改）
  FEEDS_CONF: feeds.conf.default               
  CONFIG_FILE: config/BYGDOCK.config                            #配置文件（可SSH远程定制固件插件，也可在本地提取配置粘贴到此文件）
  DIY_P1_SH: diy-part1.sh                            #自定义执行文件
  DIY_P2_SH: GDOCK-KYT.sh                           #自定义执行文件
  UPLOAD_BIN_DIR: true                               #上传【bin文件夹】到github空间（true=开启）（false=关闭）
  UPLOAD_FIRMWARE: true                          #上传固件到github空间（true=开启）（false=关闭）
  UPLOAD_COWTRANSFER: false                   #上传固件到到【奶牛快传】（true=开启）（false=关闭）   
  UPLOAD_WETRANSFER: false                       #上传固件到到【WETRANSFER】（true=开启）（false=关闭）
  UPLOAD_RELEASE: false                              # 上传固件到 Github Releases
  DELETE_OLD_WORKFLOW: true                         # 删除早期的 workflow 任务
  DELETE_OLD_RELEASE: true                           # 删除早期的 Releases 任务
  TZ: Asia/Shanghai                                  # 时区 亚洲/上海
 
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 检验结束  Checkout                          # 1.导入主分支
      uses: actions/checkout@main

    - name: 开始安装编译所需系统  Initialization environment                # 2.初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 下载固件源码  Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 加载源  Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 更新源  Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装源  Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载diy.config设置  Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
    - name: SSH远程连接服务器配置固件  SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包  Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 开始编译固件  Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: 检查github储存空间情况  Check space usage
      if: (!cancelled())
      run: df -hT

    - name: 准备Artifact
      run: |
          mkdir -p ./new/package
          cp -rf $(find ./openwrt/bin -type f -name "*.ipk") ./new/package
          
    - name: 上传IPK
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt-Mod-Ipk
        path: ./new/package

    - name: 整理固件文件夹  Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: 加载固件在github空间  Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 加载固件到WeTransfer  Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
        
    - name: 删除旧的工作流  Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
